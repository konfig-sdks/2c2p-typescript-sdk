/* tslint:disable */
/* eslint-disable */
/*
PGW Payment API 4.3

Rest API for PGW payment purpose - LATEST

The version of the OpenAPI document: 4.3


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PayloadRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PaymentInstructionApi - axios parameter creator
 * @export
 */
export const PaymentInstructionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 
         * @param {PayloadRequest} [payloadRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitInstruction: async (payloadRequest?: PayloadRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/payment/4.3/paymentinstruction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: payloadRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/payment/4.3/paymentinstruction',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(payloadRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentInstructionApi - functional programming interface
 * @export
 */
export const PaymentInstructionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentInstructionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {PaymentInstructionApiSubmitInstructionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitInstruction(requestParameters: PaymentInstructionApiSubmitInstructionRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayloadRequest>> {
            const payloadRequest: PayloadRequest = {
                payload: requestParameters.payload
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitInstruction(payloadRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PaymentInstructionApi - factory interface
 * @export
 */
export const PaymentInstructionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentInstructionApiFp(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {PaymentInstructionApiSubmitInstructionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitInstruction(requestParameters: PaymentInstructionApiSubmitInstructionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<PayloadRequest> {
            return localVarFp.submitInstruction(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for submitInstruction operation in PaymentInstructionApi.
 * @export
 * @interface PaymentInstructionApiSubmitInstructionRequest
 */
export type PaymentInstructionApiSubmitInstructionRequest = {
    
} & PayloadRequest

/**
 * PaymentInstructionApiGenerated - object-oriented interface
 * @export
 * @class PaymentInstructionApiGenerated
 * @extends {BaseAPI}
 */
export class PaymentInstructionApiGenerated extends BaseAPI {
    /**
     * 
     * @summary 
     * @param {PaymentInstructionApiSubmitInstructionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentInstructionApiGenerated
     */
    public submitInstruction(requestParameters: PaymentInstructionApiSubmitInstructionRequest = {}, options?: AxiosRequestConfig) {
        return PaymentInstructionApiFp(this.configuration).submitInstruction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
